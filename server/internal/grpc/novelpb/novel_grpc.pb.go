// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protocol/novel.proto

package novelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelServerClient is the client API for NovelServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelServerClient interface {
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
	GetNovel(ctx context.Context, in *GetNovelRequest, opts ...grpc.CallOption) (*GetNovelResponse, error)
	ListNovel(ctx context.Context, in *ListNovelRequest, opts ...grpc.CallOption) (*ListNovelResponse, error)
	RequestNovel(ctx context.Context, in *RequestNovelRequest, opts ...grpc.CallOption) (*RequestNovelResponse, error)
}

type novelServerClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelServerClient(cc grpc.ClientConnInterface) NovelServerClient {
	return &novelServerClient{cc}
}

func (c *novelServerClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, "/novel.NovelServer/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServerClient) GetNovel(ctx context.Context, in *GetNovelRequest, opts ...grpc.CallOption) (*GetNovelResponse, error) {
	out := new(GetNovelResponse)
	err := c.cc.Invoke(ctx, "/novel.NovelServer/GetNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServerClient) ListNovel(ctx context.Context, in *ListNovelRequest, opts ...grpc.CallOption) (*ListNovelResponse, error) {
	out := new(ListNovelResponse)
	err := c.cc.Invoke(ctx, "/novel.NovelServer/ListNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelServerClient) RequestNovel(ctx context.Context, in *RequestNovelRequest, opts ...grpc.CallOption) (*RequestNovelResponse, error) {
	out := new(RequestNovelResponse)
	err := c.cc.Invoke(ctx, "/novel.NovelServer/RequestNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelServerServer is the server API for NovelServer service.
// All implementations must embed UnimplementedNovelServerServer
// for forward compatibility
type NovelServerServer interface {
	GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error)
	GetNovel(context.Context, *GetNovelRequest) (*GetNovelResponse, error)
	ListNovel(context.Context, *ListNovelRequest) (*ListNovelResponse, error)
	RequestNovel(context.Context, *RequestNovelRequest) (*RequestNovelResponse, error)
	mustEmbedUnimplementedNovelServerServer()
}

// UnimplementedNovelServerServer must be embedded to have forward compatible implementations.
type UnimplementedNovelServerServer struct {
}

func (UnimplementedNovelServerServer) GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedNovelServerServer) GetNovel(context.Context, *GetNovelRequest) (*GetNovelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovel not implemented")
}
func (UnimplementedNovelServerServer) ListNovel(context.Context, *ListNovelRequest) (*ListNovelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNovel not implemented")
}
func (UnimplementedNovelServerServer) RequestNovel(context.Context, *RequestNovelRequest) (*RequestNovelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNovel not implemented")
}
func (UnimplementedNovelServerServer) mustEmbedUnimplementedNovelServerServer() {}

// UnsafeNovelServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelServerServer will
// result in compilation errors.
type UnsafeNovelServerServer interface {
	mustEmbedUnimplementedNovelServerServer()
}

func RegisterNovelServerServer(s grpc.ServiceRegistrar, srv NovelServerServer) {
	s.RegisterService(&NovelServer_ServiceDesc, srv)
}

func _NovelServer_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServerServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.NovelServer/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServerServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelServer_GetNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServerServer).GetNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.NovelServer/GetNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServerServer).GetNovel(ctx, req.(*GetNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelServer_ListNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServerServer).ListNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.NovelServer/ListNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServerServer).ListNovel(ctx, req.(*ListNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelServer_RequestNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNovelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServerServer).RequestNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.NovelServer/RequestNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServerServer).RequestNovel(ctx, req.(*RequestNovelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelServer_ServiceDesc is the grpc.ServiceDesc for NovelServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novel.NovelServer",
	HandlerType: (*NovelServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBook",
			Handler:    _NovelServer_GetBook_Handler,
		},
		{
			MethodName: "GetNovel",
			Handler:    _NovelServer_GetNovel_Handler,
		},
		{
			MethodName: "ListNovel",
			Handler:    _NovelServer_ListNovel_Handler,
		},
		{
			MethodName: "RequestNovel",
			Handler:    _NovelServer_RequestNovel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/novel.proto",
}
